<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<section id="sql-joins_sql_joins">
<title>SQL Joins</title>
<simpara>Persistent touts itself as a database-agnostic interface. How, then, are you
supposed to do things which are inherently backend-specific? This most often
comes up in Yesod when you want to join two tables together. There are some
pure-Haskell solutions that are completely backend-agonistic, but there are
also more efficient methods at our disposal. In this chapter, we&#8217;ll introduce a
common problem you might want to solve, and then build up more sophisticated
solutions.</simpara>
<section id="sql-joins_multi_author_blog">
<title>Multi-author blog</title>
<simpara>Since blogs are a well understood problem domain, we&#8217;ll use that for our
problem setup. Consider a blog engine that allows you to have multiple authors
in the database, and each blog post will have a single author. In Persistent,
we may model this as:</simpara>
<programlisting language="persistent" linenumbering="unnumbered">Author
    name Text
Blog
    author AuthorId
    title Text
    content Html</programlisting>
<simpara>Let&#8217;s set up our initial Yesod application to show a blog post index indicating
the blog title and the author:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE EmptyDataDecls             #-}
{-# LANGUAGE FlexibleContexts           #-}
{-# LANGUAGE GADTs                      #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses      #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE QuasiQuotes                #-}
{-# LANGUAGE TemplateHaskell            #-}
{-# LANGUAGE TypeFamilies               #-}
{-# LANGUAGE ViewPatterns               #-}
import           Control.Monad.Logger
import           Data.Text               (Text)
import           Database.Persist.Sqlite
import           Yesod

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persistLowerCase|
Author
    name Text
Blog
    author AuthorId
    title Text
    content Html
|]

data App = App
    { persistConfig :: SqliteConf
    , connPool      :: ConnectionPool
    }

mkYesod "App" [parseRoutes|
/ HomeR GET
/blog/#BlogId BlogR GET
|]

instance Yesod App
instance YesodPersist App where
    type YesodPersistBackend App = SqlBackend
    runDB = defaultRunDB persistConfig connPool
instance YesodPersistRunner App where
    getDBRunner = defaultGetDBRunner connPool

getHomeR :: Handler Html
getHomeR = do
    blogs &lt;- runDB $ selectList [] []

    defaultLayout $ do
        setTitle "Blog posts"
        [whamlet|
            &lt;ul&gt;
                $forall Entity blogid blog &lt;- blogs
                    &lt;li&gt;
                        &lt;a href=@{BlogR blogid}&gt;
                            #{blogTitle blog} by #{show $ blogAuthor blog}
        |]

getBlogR :: BlogId -&gt; Handler Html
getBlogR _ = error "Implementation left as exercise to reader"

main :: IO ()
main = do
    -- Use an in-memory database with 1 connection. Terrible for production,
    -- but useful for testing.
    let conf = SqliteConf ":memory:" 1
    pool &lt;- createPoolConfig conf
    flip runSqlPersistMPool pool $ do
        runMigration migrateAll

        -- Fill in some testing data
        alice &lt;- insert $ Author "Alice"
        bob   &lt;- insert $ Author "Bob"

        insert_ $ Blog alice "Alice's first post" "Hello World!"
        insert_ $ Blog bob "Bob's first post" "Hello World!!!"
        insert_ $ Blog alice "Alice's second post" "Goodbye World!"

    warp 3000 App
        { persistConfig = conf
        , connPool      = pool
        }</programlisting>
<simpara>That&#8217;s all well and good, but let&#8217;s look at the output:</simpara>
<figure><title>Authors appear as numeric identifiers</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/blog-bad-author.png"/>
  </imageobject>
  <textobject><phrase>images/blog-bad-author.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>All we&#8217;re doing is displaying the numeric identifier of each author, instead of
the author&#8217;s name. In order to fix this, we need to pull extra information from
the <literal>Author</literal> table as well. Let&#8217;s dive in to getting that done.</simpara>
</section>
<section id="sql-joins_database_queries_in_widgets">
<title>Database queries in Widgets</title>
<simpara>I&#8217;ll address this one right off the bat, since it catches many users by
surprise. You might think that you can solve this problem in the Hamlet
template itself, e.g.:</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">&lt;ul&gt;
    $forall Entity blogid blog &lt;- blogs
        $with author &lt;- runDB $ get404 $ blogAuthor
            &lt;li&gt;
                &lt;a href=@{BlogR blogid}&gt;
                    #{blogTitle blog} by #{authorName author}</programlisting>
<simpara>However, this isn&#8217;t allowed, because Hamlet will <emphasis role="strong">not</emphasis> allow you to run
database actions inside of it. One of the goals of Shakespearean templates is
to help you keep your pure and impure code separated, with the idea being that
all impure code needs to stay in Haskell.</simpara>
<simpara>But we can actually tweak the above code to work in Yesod. The idea is to
separate out the code for each blog entry into a <literal>Widget</literal> function, and then
perform the database action in the Haskell portion of the function:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">getHomeR :: Handler Html
getHomeR = do
    blogs &lt;- runDB $ selectList [] []

    defaultLayout $ do
        setTitle "Blog posts"
        [whamlet|
            &lt;ul&gt;
                $forall blogEntity &lt;- blogs
                    ^{showBlogLink blogEntity}
        |]

showBlogLink :: Entity Blog -&gt; Widget
showBlogLink (Entity blogid blog) = do
    author &lt;- handlerToWidget $ runDB $ get404 $ blogAuthor blog
    [whamlet|
        &lt;li&gt;
            &lt;a href=@{BlogR blogid}&gt;
                #{blogTitle blog} by #{authorName author}
    |]</programlisting>
<simpara>We need to use <literal>handlerToWidget</literal> to turn our <literal>Handler</literal> action into a <literal>Widget</literal>
action, but otherwise the code is straightforward. And furthermore, we now get
exactly the output we wanted:</simpara>
<figure><title>Authors appear as names</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/blog-good-author.png"/>
  </imageobject>
  <textobject><phrase>images/blog-good-author.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="sql-joins_joins">
<title>Joins</title>
<simpara>If we have the exact result we&#8217;re looking for, why isn&#8217;t this chapter over? The
problem is that this technique is highly inefficient. We&#8217;re performing one
database query to load up all of the blog posts, then a separate query for each
blog post to get the author names. This is far less efficient than simply using
a SQL join. The question is: how do we do a join in Persistent? We&#8217;ll start off
by writing some raw SQL:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">getHomeR :: Handler Html
getHomeR = do
    blogs &lt;- runDB $ rawSql
        "SELECT ??, ?? \
        \FROM blog INNER JOIN author \
        \ON blog.author=author.id"
        []

    defaultLayout $ do
        setTitle "Blog posts"
        [whamlet|
            &lt;ul&gt;
                $forall (Entity blogid blog, Entity _ author) &lt;- blogs
                    &lt;li&gt;
                        &lt;a href=@{BlogR blogid}&gt;
                            #{blogTitle blog} by #{authorName author}
        |]</programlisting>
<simpara>We pass the <literal>rawSql</literal> function two parameters: a SQL query, and a list of
additional parameters to replace placeholders in the query. That list is empty,
since we&#8217;re not using any placeholders. However, note that we&#8217;re using <literal>??</literal> in
our <literal>SELECT</literal> statement. This is a form of type inspection: <literal>rawSql</literal> will detect
the type of entities being demanded, and automatically fill in the fields that
are necessary to make the query.</simpara>
<simpara><literal>rawSql</literal> is certainly powerful, but it&#8217;s also unsafe. There&#8217;s no syntax
checking on your SQL query string, so you can get runtime errors. Also, it&#8217;s
easy to end up querying for the wrong type and end up with very confusing
runtime error messages.</simpara>
</section>
<section id="sql-joins_esqueleto">
<title>Esqueleto</title>
<note><simpara>Currently, esqueleto is not included in a recent LTS Haskell,
and therefore using it may require some extra work, not covered by the
book.</simpara></note>
<simpara>Persistent has a companion library- Esqueleto- which provides an expressive,
type safe DSL for writing SQL queries. It takes advantage of the Persistent
types to ensure it generates valid SQL queries and produces the results
requested by the program. In order to use Esqueleto, we&#8217;re going to add some
imports:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">import qualified Database.Esqueleto      as E
import           Database.Esqueleto      ((^.))</programlisting>
<simpara>And then write our query using Esqueleto:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">getHomeR :: Handler Html
getHomeR = do
    blogs &lt;- runDB
           $ E.select
           $ E.from $ \(blog `E.InnerJoin` author) -&gt; do
                E.on $ blog ^. BlogAuthor E.==. author ^. AuthorId
                return
                    ( blog   ^. BlogId
                    , blog   ^. BlogTitle
                    , author ^. AuthorName
                    )

    defaultLayout $ do
        setTitle "Blog posts"
        [whamlet|
            &lt;ul&gt;
                $forall (E.Value blogid, E.Value title, E.Value name) &lt;- blogs
                    &lt;li&gt;
                        &lt;a href=@{BlogR blogid}&gt;#{title} by #{name}
        |]</programlisting>
<simpara>Notice how similar the query looks to the SQL we wrote previously. One thing of
particular interest is the <literal>^.</literal> operator, which is a <emphasis role="strong">projection</emphasis>. <literal>blog ^.
BlogAuthor</literal>, for example, means "take the <literal>author</literal> column of the <literal>blog</literal> table."
And thanks to the type safety of Esqueleto, you could never accidentally
project <literal>AuthorName</literal> from <literal>blog</literal>: the type system will stop you!</simpara>
<simpara>In addition to safety, there&#8217;s also a performance advantage to Esqueleto.
Notice the <literal>return</literal>ed tuple; it explicitly lists the three columns that we
need to generate our listing. This can provide a huge performance boost: unlike
all other examples we&#8217;ve had, this one does not require transferring the
(potentially quite large) <literal>content</literal> column of the blog post to generate the
listing.</simpara>
<note><simpara>For the record, it&#8217;s possible to achieve this with <literal>rawSql</literal> as well, it&#8217;s
just a bit trickier.</simpara></note>
<simpara>Esqueleto is really the gold standard in writing SQL queries in Persistent. The
rule of thumb should be: if you&#8217;re doing something that fits naturally into
Persistent&#8217;s query syntax, use Persistent, as it&#8217;s database agnostic and a bit
easier to use. But if you&#8217;re doing something that would be more efficient with
a SQL-specific feature, you should strongly consider Esqueleto.</simpara>
</section>
<section id="sql-joins_streaming">
<title>Streaming</title>
<simpara>There&#8217;s still a problem with our Esqueleto approach. If there are thousands of
blog posts, then the workflow will be:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Read thousands of blog posts into memory on the server.
</simpara>
</listitem>
<listitem>
<simpara>
Render out the entire HTML page.
</simpara>
</listitem>
<listitem>
<simpara>
Send the HTML page to the client.
</simpara>
</listitem>
</orderedlist>
<simpara>This has two downsides: it uses a lot of memory, and it gives high latency for the user. If this is a bad approach, why does Yesod gear you towards it out of the box, instead of tending towards a streaming approach? Two reasons:</simpara>
<itemizedlist>
<listitem>
<simpara>
<emphasis>Correctness</emphasis>: imagine if there was an error reading the 243rd record from the database. By doing a non-streaming response, Yesod can catch the exception and send a meaningful 500 error response. If we were already streaming, the streaming body would simply stop in the middle of a misleading 200 OK respond.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>Ease of use</emphasis>: it&#8217;s usually easier to work with non-streaming bodies.
</simpara>
</listitem>
</itemizedlist>
<simpara>The standard recommendation I&#8217;d give someone who wants to generate listings
that may be large is to use pagination. This allows you to do less work on the
server, write simple code, get the correctness guarantees Yesod provides out of
the box, and reduce user latency. However, there are times when you&#8217;ll really
want to do a streaming response, so let&#8217;s cover that here.</simpara>
<simpara>Switching Esqueleto to a streaming response is easy: replace <literal>select</literal> with
<literal>selectSource</literal>. The Esqueleto query itself remains unchanged. Then we&#8217;ll use
the <literal>respondSourceDB</literal> function to generate a streaming database response, and
manually construct our HTML to wrap up the listing.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">getHomeR :: Handler TypedContent
getHomeR = do
    let blogsSrc =
             E.selectSource
           $ E.from $ \(blog `E.InnerJoin` author) -&gt; do
                E.on $ blog ^. BlogAuthor E.==. author ^. AuthorId
                return
                    ( blog   ^. BlogId
                    , blog   ^. BlogTitle
                    , author ^. AuthorName
                    )

    render &lt;- getUrlRenderParams
    respondSourceDB typeHtml $ do
        sendChunkText "&lt;html&gt;&lt;head&gt;&lt;title&gt;Blog posts&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt;"
        blogsSrc $= CL.map (\(E.Value blogid, E.Value title, E.Value name) -&gt;
            toFlushBuilder $
            [hamlet|
                &lt;li&gt;
                    &lt;a href=@{BlogR blogid}&gt;#{title} by #{name}
            |] render
            )
        sendChunkText "&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;"</programlisting>
<simpara>Notice the usage of <literal>sendChunkText</literal>, which sends some raw <literal>Text</literal> values over
the network. We then take each of our blog tuples and use conduit&#8217;s <literal>map</literal>
function to create a streaming value. We use <literal>hamlet</literal> to get templating, and
then pass in our <literal>render</literal> function to convert the type-safe URLs into their
textual versions. Finally, <literal>toFlushBuilder</literal> converts our <literal>Html</literal> value into a
<literal>Flush Builder</literal> value, as needed by Yesod&#8217;s streaming framework.</simpara>
<simpara>Unfortunately, we&#8217;re no longer able to take advantage of Hamlet to do our
overall page layout, since we need to explicit generate start and end tags
separately. This introduces another point for possible bugs, if we accidentally
create unbalanced tags. We also lose the ability to use <literal>defaultLayout</literal>, for
exactly the same reason.</simpara>
<simpara>Streaming HTML responses are a powerful tool, and are sometimes necessary. But
generally speaking, I&#8217;d recommend sticking to safer options.</simpara>
</section>
<section id="sql-joins_conclusion">
<title>Conclusion</title>
<simpara>This chapter covered a number of ways of doing a SQL join:</simpara>
<itemizedlist>
<listitem>
<simpara>
Avoid the join entirely, and manually grab the associated data in Haskell. This is also known as an application level join.
</simpara>
</listitem>
<listitem>
<simpara>
Write the SQL explicitly with <literal>rawSql</literal>. While somewhat convenient, this loses a lot of Persistent&#8217;s type safety.
</simpara>
</listitem>
<listitem>
<simpara>
Use Esqueleto&#8217;s DSL functionality to create a type-safe SQL query.
</simpara>
</listitem>
<listitem>
<simpara>
And if you need it, you can even generate a streaming response from Esqueleto.
</simpara>
</listitem>
</itemizedlist>
<simpara>For completeness, here&#8217;s the entire body of the final, streaming example:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE EmptyDataDecls             #-}
{-# LANGUAGE FlexibleContexts           #-}
{-# LANGUAGE GADTs                      #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses      #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE QuasiQuotes                #-}
{-# LANGUAGE TemplateHaskell            #-}
{-# LANGUAGE TypeFamilies               #-}
{-# LANGUAGE ViewPatterns               #-}
import           Control.Monad.Logger
import           Data.Text               (Text)
import qualified Database.Esqueleto      as E
import           Database.Esqueleto      ((^.))
import           Database.Persist.Sqlite
import           Yesod
import qualified Data.Conduit.List as CL
import Data.Conduit (($=))

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persistLowerCase|
Author
    name Text
Blog
    author AuthorId
    title Text
    content Html
|]

data App = App
    { persistConfig :: SqliteConf
    , connPool      :: ConnectionPool
    }

mkYesod "App" [parseRoutes|
/ HomeR GET
/blog/#BlogId BlogR GET
|]

instance Yesod App
instance YesodPersist App where
    type YesodPersistBackend App = SqlBackend
    runDB = defaultRunDB persistConfig connPool
instance YesodPersistRunner App where
    getDBRunner = defaultGetDBRunner connPool

getHomeR :: Handler TypedContent
getHomeR = do
    let blogsSrc =
             E.selectSource
           $ E.from $ \(blog `E.InnerJoin` author) -&gt; do
                E.on $ blog ^. BlogAuthor E.==. author ^. AuthorId
                return
                    ( blog   ^. BlogId
                    , blog   ^. BlogTitle
                    , author ^. AuthorName
                    )

    render &lt;- getUrlRenderParams
    respondSourceDB typeHtml $ do
        sendChunkText "&lt;html&gt;&lt;head&gt;&lt;title&gt;Blog posts&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt;"
        blogsSrc $= CL.map (\(E.Value blogid, E.Value title, E.Value name) -&gt;
            toFlushBuilder $
            [hamlet|
                &lt;li&gt;
                    &lt;a href=@{BlogR blogid}&gt;#{title} by #{name}
            |] render
            )
        sendChunkText "&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;"

getBlogR :: BlogId -&gt; Handler Html
getBlogR _ = error "Implementation left as exercise to reader"

main :: IO ()
main = do
    -- Use an in-memory database with 1 connection. Terrible for production,
    -- but useful for testing.
    let conf = SqliteConf ":memory:" 1
    pool &lt;- createPoolConfig conf
    flip runSqlPersistMPool pool $ do
        runMigration migrateAll

        -- Fill in some testing data
        alice &lt;- insert $ Author "Alice"
        bob   &lt;- insert $ Author "Bob"

        insert_ $ Blog alice "Alice's first post" "Hello World!"
        insert_ $ Blog bob "Bob's first post" "Hello World!!!"
        insert_ $ Blog alice "Alice's second post" "Goodbye World!"

    warp 3000 App
        { persistConfig = conf
        , connPool      = pool
        }</programlisting>
</section>
</section>
</article>
