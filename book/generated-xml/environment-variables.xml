<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<section id="environment-variables_environment_variables_for_configuration">
<title>Environment variables for configuration</title>
<simpara>There&#8217;s a recent move, perhaps most prominently advocated by
<ulink url="http://12factor.net/config">the twelve-factor app</ulink>, to store all app
configuration in environment variables, instead of using config files or
hard-coding them into the application source code (you don&#8217;t do that, right?).</simpara>
<simpara>Yesod&#8217;s scaffolding comes built in with some support for this, most
specifically for respecting the <literal>YESOD_APPROOT</literal> environment variable to indicate how
URLs should be generated, the <literal>YESOD_PORT</literal> environment variable for which port to
listen for requests on, and database connection settings. (Incidentally, this
ties in nicely with <ulink url="https://github.com/snoyberg/keter">the Keter deployment
manager</ulink>.)</simpara>
<simpara>The technique for doing this is quite easy: just do the environment variable
lookup in your <literal>main</literal> function. This example demonstrates this technique, along
with the slightly special handling necessary for setting the application root.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeFamilies      #-}
import           Data.Text          (Text, pack)
import           System.Environment
import           Yesod

data App = App
    { myApproot      :: Text
    , welcomeMessage :: Text
    }

mkYesod "App" [parseRoutes|
/ HomeR GET
|]

instance Yesod App where
    approot = ApprootMaster myApproot

getHomeR :: Handler Html
getHomeR = defaultLayout $ do
    App {..} &lt;- getYesod
    setTitle "Environment variables"
    [whamlet|
        &lt;p&gt;Here's the welcome message: #{welcomeMessage}
        &lt;p&gt;
            &lt;a href=@{HomeR}&gt;And a link to: @{HomeR}
    |]

main :: IO ()
main = do
    myApproot &lt;- fmap pack $ getEnv "YESOD_APPROOT"
    welcomeMessage &lt;- fmap pack $ getEnv "WELCOME_MESSAGE"
    warp 3000 App {..}</programlisting>
<simpara>The only tricky things here are:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
You need to convert the <literal>String</literal> value returned by <literal>getEnv</literal> into a <literal>Text</literal> by using <literal>pack</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
We use the <literal>ApprootMaster</literal> constructor for <literal>approot</literal>, which says "apply this function to the foundation datatype to get the actual application root."
</simpara>
</listitem>
</orderedlist>
</section>
</article>
